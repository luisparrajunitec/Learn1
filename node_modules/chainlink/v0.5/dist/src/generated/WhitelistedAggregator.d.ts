/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WhitelistedAggregatorInterface extends Interface {
  functions: {
    getOriginatingRoundOfAnswer: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimedOutStatus: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    restartDelay: TypedFunctionDescription<{ encode([]: []): string }>;

    updateFutureRounds: TypedFunctionDescription<{
      encode([
        _newPaymentAmount,
        _minAnswers,
        _maxAnswers,
        _restartDelay,
        _timeout
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    availableFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    updateAvailableFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    oracleCount: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    reportingRound: TypedFunctionDescription<{ encode([]: []): string }>;

    timeout: TypedFunctionDescription<{ encode([]: []): string }>;

    description: TypedFunctionDescription<{ encode([]: []): string }>;

    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    removeFromWhitelist: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([, ,]: [string, BigNumberish, Arrayish]): string;
    }>;

    removeOracle: TypedFunctionDescription<{
      encode([_oracle, _minAnswers, _maxAnswers, _restartDelay]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getAnswer: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    addOracle: TypedFunctionDescription<{
      encode([_oracle, _minAnswers, _maxAnswers, _restartDelay]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    latestSubmission: TypedFunctionDescription<{
      encode([_oracle]: [string]): string;
    }>;

    withdrawFunds: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    paymentAmount: TypedFunctionDescription<{ encode([]: []): string }>;

    minAnswerCount: TypedFunctionDescription<{ encode([]: []): string }>;

    allocatedFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    whitelisted: TypedFunctionDescription<{ encode([]: [string]): string }>;

    maxAnswerCount: TypedFunctionDescription<{ encode([]: []): string }>;

    addToWhitelist: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    updateAnswer: TypedFunctionDescription<{
      encode([_round, _answer]: [BigNumberish, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    AddedToWhitelist: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RemovedFromWhitelist: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    AvailableFundsUpdated: TypedEventDescription<{
      encodeTopics([amount]: [BigNumberish | null]): string[];
    }>;

    RoundDetailsUpdated: TypedEventDescription<{
      encodeTopics([
        paymentAmount,
        minAnswerCount,
        maxAnswerCount,
        restartDelay,
        timeout
      ]: [
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    OracleAdded: TypedEventDescription<{
      encodeTopics([oracle]: [string | null]): string[];
    }>;

    OracleRemoved: TypedEventDescription<{
      encodeTopics([oracle]: [string | null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransfered: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, timestamp]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;
  };
}

export class WhitelistedAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WhitelistedAggregator;
  attach(addressOrName: string): WhitelistedAggregator;
  deployed(): Promise<WhitelistedAggregator>;

  on(event: EventFilter | string, listener: Listener): WhitelistedAggregator;
  once(event: EventFilter | string, listener: Listener): WhitelistedAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): WhitelistedAggregator;
  removeAllListeners(eventName: EventFilter | string): WhitelistedAggregator;
  removeListener(eventName: any, listener: Listener): WhitelistedAggregator;

  interface: WhitelistedAggregatorInterface;

  functions: {
    getOriginatingRoundOfAnswer(_roundId: BigNumberish): Promise<BigNumber>;

    getTimedOutStatus(_roundId: BigNumberish): Promise<boolean>;

    decimals(): Promise<number>;

    restartDelay(): Promise<number>;

    updateFutureRounds(
      _newPaymentAmount: BigNumberish,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    availableFunds(): Promise<BigNumber>;

    updateAvailableFunds(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    oracleCount(): Promise<number>;

    latestRound(): Promise<BigNumber>;

    reportingRound(): Promise<BigNumber>;

    timeout(): Promise<number>;

    description(): Promise<string>;

    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    latestTimestamp(): Promise<BigNumber>;

    removeFromWhitelist(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    onTokenTransfer(
      arg0: string,
      arg1: BigNumberish,
      arg2: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeOracle(
      _oracle: string,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAnswer(_roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(_roundId: BigNumberish): Promise<BigNumber>;

    addOracle(
      _oracle: string,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    latestSubmission(
      _oracle: string
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    paymentAmount(): Promise<BigNumber>;

    minAnswerCount(): Promise<number>;

    allocatedFunds(): Promise<BigNumber>;

    whitelisted(arg0: string): Promise<boolean>;

    maxAnswerCount(): Promise<number>;

    addToWhitelist(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateAnswer(
      _round: BigNumberish,
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getOriginatingRoundOfAnswer(_roundId: BigNumberish): Promise<BigNumber>;

  getTimedOutStatus(_roundId: BigNumberish): Promise<boolean>;

  decimals(): Promise<number>;

  restartDelay(): Promise<number>;

  updateFutureRounds(
    _newPaymentAmount: BigNumberish,
    _minAnswers: BigNumberish,
    _maxAnswers: BigNumberish,
    _restartDelay: BigNumberish,
    _timeout: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  availableFunds(): Promise<BigNumber>;

  updateAvailableFunds(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  oracleCount(): Promise<number>;

  latestRound(): Promise<BigNumber>;

  reportingRound(): Promise<BigNumber>;

  timeout(): Promise<number>;

  description(): Promise<string>;

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  latestTimestamp(): Promise<BigNumber>;

  removeFromWhitelist(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  onTokenTransfer(
    arg0: string,
    arg1: BigNumberish,
    arg2: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeOracle(
    _oracle: string,
    _minAnswers: BigNumberish,
    _maxAnswers: BigNumberish,
    _restartDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAnswer(_roundId: BigNumberish): Promise<BigNumber>;

  getTimestamp(_roundId: BigNumberish): Promise<BigNumber>;

  addOracle(
    _oracle: string,
    _minAnswers: BigNumberish,
    _maxAnswers: BigNumberish,
    _restartDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  latestSubmission(
    _oracle: string
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  withdrawFunds(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  paymentAmount(): Promise<BigNumber>;

  minAnswerCount(): Promise<number>;

  allocatedFunds(): Promise<BigNumber>;

  whitelisted(arg0: string): Promise<boolean>;

  maxAnswerCount(): Promise<number>;

  addToWhitelist(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateAnswer(
    _round: BigNumberish,
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddedToWhitelist(user: null): EventFilter;

    RemovedFromWhitelist(user: null): EventFilter;

    AvailableFundsUpdated(amount: BigNumberish | null): EventFilter;

    RoundDetailsUpdated(
      paymentAmount: BigNumberish | null,
      minAnswerCount: BigNumberish | null,
      maxAnswerCount: BigNumberish | null,
      restartDelay: null,
      timeout: null
    ): EventFilter;

    OracleAdded(oracle: string | null): EventFilter;

    OracleRemoved(oracle: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransfered(from: string | null, to: string | null): EventFilter;

    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null
    ): EventFilter;
  };

  estimate: {
    getOriginatingRoundOfAnswer(_roundId: BigNumberish): Promise<BigNumber>;

    getTimedOutStatus(_roundId: BigNumberish): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    restartDelay(): Promise<BigNumber>;

    updateFutureRounds(
      _newPaymentAmount: BigNumberish,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish
    ): Promise<BigNumber>;

    availableFunds(): Promise<BigNumber>;

    updateAvailableFunds(): Promise<BigNumber>;

    withdrawable(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    oracleCount(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    reportingRound(): Promise<BigNumber>;

    timeout(): Promise<BigNumber>;

    description(): Promise<BigNumber>;

    acceptOwnership(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;

    removeFromWhitelist(_user: string): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    onTokenTransfer(
      arg0: string,
      arg1: BigNumberish,
      arg2: Arrayish
    ): Promise<BigNumber>;

    removeOracle(
      _oracle: string,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish
    ): Promise<BigNumber>;

    getAnswer(_roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(_roundId: BigNumberish): Promise<BigNumber>;

    addOracle(
      _oracle: string,
      _minAnswers: BigNumberish,
      _maxAnswers: BigNumberish,
      _restartDelay: BigNumberish
    ): Promise<BigNumber>;

    latestSubmission(_oracle: string): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    paymentAmount(): Promise<BigNumber>;

    minAnswerCount(): Promise<BigNumber>;

    allocatedFunds(): Promise<BigNumber>;

    whitelisted(arg0: string): Promise<BigNumber>;

    maxAnswerCount(): Promise<BigNumber>;

    addToWhitelist(_user: string): Promise<BigNumber>;

    updateAnswer(
      _round: BigNumberish,
      _answer: BigNumberish
    ): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;

    withdraw(_recipient: string, _amount: BigNumberish): Promise<BigNumber>;
  };
}
