/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AggregatorNodeInterfaceInterface extends Interface {
  functions: {
    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;

    updateAnswer: TypedFunctionDescription<{
      encode([round, answer]: [BigNumberish, BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class AggregatorNodeInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AggregatorNodeInterface;
  attach(addressOrName: string): AggregatorNodeInterface;
  deployed(): Promise<AggregatorNodeInterface>;

  on(event: EventFilter | string, listener: Listener): AggregatorNodeInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AggregatorNodeInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AggregatorNodeInterface;
  removeAllListeners(eventName: EventFilter | string): AggregatorNodeInterface;
  removeListener(eventName: any, listener: Listener): AggregatorNodeInterface;

  interface: AggregatorNodeInterfaceInterface;

  functions: {
    withdrawable(): Promise<BigNumber>;

    updateAnswer(
      round: BigNumberish,
      answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  withdrawable(): Promise<BigNumber>;

  updateAnswer(
    round: BigNumberish,
    answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    withdrawable(): Promise<BigNumber>;

    updateAnswer(round: BigNumberish, answer: BigNumberish): Promise<BigNumber>;

    withdraw(recipient: string, amount: BigNumberish): Promise<BigNumber>;
  };
}
