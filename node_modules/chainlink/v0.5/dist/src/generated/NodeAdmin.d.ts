/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface NodeAdminInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    authorizedNode: TypedFunctionDescription<{ encode([]: [string]): string }>;

    withdrawFunds: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    withdrawable: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    updateAnswer: TypedFunctionDescription<{
      encode([_aggregator, _round, _answer]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_aggregator, _recipient, _amount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    setAuthorizedNode: TypedFunctionDescription<{
      encode([_node, _authorized]: [string, boolean]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransfered: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class NodeAdmin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): NodeAdmin;
  attach(addressOrName: string): NodeAdmin;
  deployed(): Promise<NodeAdmin>;

  on(event: EventFilter | string, listener: Listener): NodeAdmin;
  once(event: EventFilter | string, listener: Listener): NodeAdmin;
  addListener(eventName: EventFilter | string, listener: Listener): NodeAdmin;
  removeAllListeners(eventName: EventFilter | string): NodeAdmin;
  removeListener(eventName: any, listener: Listener): NodeAdmin;

  interface: NodeAdminInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    authorizedNode(arg0: string): Promise<boolean>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(_aggregator: string): Promise<BigNumber>;

    updateAnswer(
      _aggregator: string,
      _round: BigNumberish,
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _aggregator: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorizedNode(
      _node: string,
      _authorized: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  authorizedNode(arg0: string): Promise<boolean>;

  withdrawFunds(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(_aggregator: string): Promise<BigNumber>;

  updateAnswer(
    _aggregator: string,
    _round: BigNumberish,
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _aggregator: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorizedNode(
    _node: string,
    _authorized: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransfered(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    authorizedNode(arg0: string): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    withdrawable(_aggregator: string): Promise<BigNumber>;

    updateAnswer(
      _aggregator: string,
      _round: BigNumberish,
      _answer: BigNumberish
    ): Promise<BigNumber>;

    withdraw(
      _aggregator: string,
      _recipient: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setAuthorizedNode(_node: string, _authorized: boolean): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;
  };
}
