"use strict";
// An extension to ether's bignumber library that manually
// polyfills any methods we need for tests by converting the
// numbers back and forth between ethers.utils.BigNumber and
// bn.js. If we end up having to replace a ton of methods in the
// future this way, it might be worth creating a proxy object
// that automatically does these method polyfills for us.
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const BN = require("bn.js");
const BN_1 = new BN(-1);
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L42
function bnify(value) {
    const hex = value.toHexString();
    if (hex[0] === '-') {
        return new BN(hex.substring(3), 16).mul(BN_1);
    }
    return new BN(hex.substring(2), 16);
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L22
function toHex(bn) {
    const value = bn.toString(16);
    if (value[0] === '-') {
        if (value.length % 2 === 0) {
            return '-0x0' + value.substring(1);
        }
        return '-0x' + value.substring(1);
    }
    if (value.length % 2 === 1) {
        return '0x0' + value;
    }
    return '0x' + value;
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L38
function toBigNumber(bn) {
    return new ethers_1.ethers.utils.BigNumber(toHex(bn));
}
ethers_1.ethers.utils.BigNumber.prototype.isEven = function () {
    return bnify(this).isEven();
};
ethers_1.ethers.utils.BigNumber.prototype.umod = function (val) {
    return toBigNumber(bnify(this).umod(bnify(val)));
};
ethers_1.ethers.utils.BigNumber.prototype.shrn = function (val) {
    return toBigNumber(bnify(this).shrn(val));
};
ethers_1.ethers.utils.BigNumber.prototype.invm = function (val) {
    return toBigNumber(bnify(this).invm(bnify(val)));
};
//# sourceMappingURL=BigNumber.js.map